연결리스트를 사용하는 프로그래밍에서 자주하게 되는 기본적인 연산들에 대해서 
하나씩 공부하고, 다시한번 리스트 노드구조를 머릿속으로 생각하면서 
함수의 값,주소전달방식의 차이점을 공부합시다.

먼저 노드들이 정상적인 데이터 필드와 링크 필드를 가지고 
서로 연결되어있는 모습을 상상해 봅시다.
그리고 삽입 삭제 검색을 하는 아이디어를 생각해볼수있습니다.

먼저 삽입연산입니다.



* 삽입
	(1) 새로운 노드를 만들고 추가할 데이터를 저장한다.
	(2) 새로운 새로운 노드의 next 필드가 현재의 head노드를 가리키도록 한다.
	(3) 새로운 노드를 새로운 head 노드로 한다.

	void add_first(char * item, Node *head)
	{
		Node * temp = (Node *)malloc(sizeof(Node));
		temp->data = item;
		temp->next = head;
		head = temp;
	}

  + 문자열 시작주소를 받아서 새 노드를 만들고 데이터 필드 data가 item이랑 똑같은
    데이터를 가리키도록 한 뒤 노드 필드는 리스트의 맨 앞노드의 주소를 가리키도록 
	새로운 head를 새 노드로 한 것인데, 이는 head가 NULL인 경우 에러가 납니다.
    또 명확하게도 위 함수는 head가 새로운 노드 temp를 가리키게 했지만,
    함수가 종료되면 여전히 head는 temp가 아닌 기존의 맨 앞 노드를 가리키고 있습니다.
    왜 이런 일이 일어납니까?
    기본적으로 알고가야하는 프로그래밍 상식으로 
	우리가 바꾸고자하는 head와 add_first의 head는 서로 다른 변수입니다.
	함수 내에서 일어난 일은 바깥에서 영향을 못끼치기 call by value 방식을 사용하기 때문에.
	우리가 원하는 결과를 내기위해선 그 공간 자체를 가리키는 call by reference 해야합니다.

	void add_first(Node **ptr_head, char * item)
	{
		Node * temp = (Node *)malloc(sizeof(Node));
		temp->data = item;
		temp->next = *ptr_head;
		*ptr_head = temp;
	}

	지역변수 ptr_head에 우리가 접근해서 값을 바꾸고싶은 head의 주소를 받아왔기 때문에.
	직접 접근해서 수정할 수 있어서 성공적으로 head가 새로운 노드 temp의 주소로 수정이 
	됩니다.

	add_first(&head, item_to_store)

  + 다른 방법으로 위처럼 고민하기 싫다면 Node의 주소를 return 받는 방식으로 해도 됩니다.

	Node *add_first(Node *head, char * item)
		{
			Node * temp = (Node *)malloc(sizeof(Node));
			temp->data = item;
			temp->next = head;
			return temp;
		}

	꼭 reference 전달이 아니더라도 함수 내부의 temp값을 반환해와서 직접 head를 수정할수있습니다.

	head = add_first(head, item_to_store);

  + 연결 리스트를 다루는 프로그램에서 가장 주의할 점은 내가 작성한 코드가 일반적인
	경우만이 아니라 특수한 경우에도 문제 없이 작동하는지 확인해야 한다는 것입니다.
	기존의 연결 리스트의 길이가 0인 경우, head가 NULL인 경우에도 문제가 없는지 확인
	해야 한다는 것입니다.



