* 목표
	- 이전에는 각각의 사람에 대해서 이름과 전화번호만 저장했었는데 
		이젠 이메일 어드레스라든가 기타 여러가지 정보를 추가로 같이 저장해보자.
	- 구조체를 사용해보자.

* 실행 예

	$ add     Hong    Gil-Dong
		Phone: 01023456789
		Email: 
		Group: Friend
	John was added successfully.
	$ find  Hong     Gil-Dong
	Hong Gil-Dong:
		Phone: 01023456789
		Email:
		Group: Friend
	$ save as directory.txt
	$ exit

* 실행조건
	- 이전 전화번호북 프로젝트와 동일하게 $ 프롬프트를 출력하고 명령어입력을 요구합니다.
	- 각 사람에 대해서 이름, 전화번호, 이메일 주소, 그리고 그룹을 지정할 수 있다. (구조체)
		단 이름을 제외한 다른 항목들은 비워둘 수도 있다.
	- 이름이 하나 이상의 단어로 구성될 수 있는데 단어 사이의 여러 개의 공백은 한 칸의 공백으로 저장하게 하라. (공백처리)

* 읽어올 txt파일형식.
	- 한 라인에는 한 사람에 대한 정보가 이름, 전화번호, 이메일주소, 그룹이름이 순서대로 쓰여져 있다.
	- '#' 문자를 필드들 간의 구분자로 사용한다.
	- 이름을 제외한 모든필드는 내용이 존재하지않을 때 하나의 공백문자로 표시하라.
	- 모든 라인은 반드시 구분자로 표시하라. (tokenizing 시에 구분자 대신에 \0문자를 쓰게 되어있는데 token은 \0문자를 만나게 하기위해서).

* 자료구조
	- 구조체를 통해서 한 사람을 표현하자.
	- 정의한 구조체 타입배열을 하나 정의해서 하나의 배열로 데이터를 관리하자.



* 구조체
	- 항상 같이 붙어다녀야 하는 데이터를 별개의 변수들에 분산해서 저장하는 것은 바람직하지 않다.
	- 어떤 한 사람의 이름, 전화번호, 이메일 주소 등이 그런 예이다.
	- C 언어에서는 이런 경우 구조체(structure)를 사용한다.

	(예1)
		struct point {
			int a;
			int b;
		};

	(예2)
		typedef struct person {
			char* name;
			char* number;
			char* email;
			char* group;
		} Person;

* v3.0과 다른점
	- read_line 함수의 변경점.
		오로지 키보드의 입력에서 이제는 파일로도 읽고 키보드로도 읽을 수 있도록 수정.
		파일로도 읽어야 하기때문에 getchar()가 아닌 fgetc()로 변경.
		파일로도 읽기때문에 맨 마지막 파일데이터에 \n이 없을 수 있다. ch != EOF 조건문 추가.